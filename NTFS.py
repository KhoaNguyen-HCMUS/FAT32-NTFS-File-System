import sys

# ------------------------------
# C√°c h√†m h·ªó tr·ª£ ƒë·ªçc d·ªØ li·ªáu little endian
# ------------------------------
def read_little_endian(data, offset, length):
    """ƒê·ªçc gi√° tr·ªã little endian t·ª´ m·∫£ng bytes."""
    value = 0
    for i in range(length):
        value += data[offset + i] << (8 * i)
    return value

def get_signed_byte(value):
    """Chuy·ªÉn byte kh√¥ng d·∫•u sang c√≥ d·∫•u (cho MFT record size)."""
    return value if value < 0x80 else value - 256

# ------------------------------
# ƒê·ªçc Boot Sector NTFS v√† ph√¢n t√≠ch c√°c th√¥ng s·ªë c∆° b·∫£n
# ------------------------------
def read_ntfs_boot_sector_from_device(device):
    """ƒê·ªçc 512 byte ƒë·∫ßu ti√™n c·ªßa thi·∫øt b·ªã (Boot Sector)"""
    try:
        with open(device, "rb") as disk:
            boot_sector = disk.read(512)
            return boot_sector
    except PermissionError:
        print("‚ùå Kh√¥ng ƒë·ªß quy·ªÅn truy c·∫≠p! H√£y ch·∫°y b·∫±ng quy·ªÅn Administrator ho·∫∑c sudo.")
        sys.exit(1)
    except FileNotFoundError:
        print("‚ùå ·ªî ƒëƒ©a kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ truy c·∫≠p.")
        sys.exit(1)

def read_ntfs_boot_sector(boot_sector):
    """
    Ph√¢n t√≠ch Boot Sector c·ªßa NTFS.
    L·∫•y:
      - Bytes per Sector (offset 0x0B, 2 bytes)
      - Sectors per Cluster (offset 0x0D, 1 byte)
      - Total Sectors (offset 0x28, 8 bytes)
      - MFT Cluster Number (offset 0x30, 8 bytes)
      - MFT Record Size (offset 0x40, 1 byte; x·ª≠ l√Ω gi√° tr·ªã c√≥ d·∫•u)
      - Volume Serial Number (offset 0x50, 8 bytes)
    """
    bytes_per_sector = read_little_endian(boot_sector, 0x0B, 2)
    sectors_per_cluster = read_little_endian(boot_sector, 0x0D, 1)
    total_sectors = read_little_endian(boot_sector, 0x28, 8)
    mft_cluster = read_little_endian(boot_sector, 0x30, 8)
    raw_mft_record_size = boot_sector[0x40]
    signed_mft_record_size = get_signed_byte(raw_mft_record_size)
    if signed_mft_record_size < 0:
        mft_record_size = 2 ** abs(signed_mft_record_size)
    else:
        mft_record_size = signed_mft_record_size * sectors_per_cluster * bytes_per_sector

    volume_serial = read_little_endian(boot_sector, 0x50, 8)
    
    info = {
        "Bytes per Sector": bytes_per_sector,
        "Sectors per Cluster": sectors_per_cluster,
        "Total Sectors": total_sectors,
        "MFT Cluster Number": mft_cluster,
        "MFT Record Size": mft_record_size,
        "Volume Serial Number": volume_serial,
    }
    return info

# ------------------------------
# H√†m ƒë·ªçc m·ªôt MFT record v√† gi·∫£i m√£ th√¥ng tin FILE_NAME
# ------------------------------
def parse_ntfs_mft_record(record_data, record_number):
    """
    Gi·∫£i m√£ m·ªôt MFT record ƒë·ªÉ l·∫•y:
      - Signature ("FILE")
      - Flags (ƒë·ªÉ x√°c ƒë·ªãnh n·∫øu record l√† directory)
      - FILE_NAME attribute: l·∫•y parent directory (8 byte, d√πng lower 48 bit) v√† t√™n file (utf-16le)
    N·∫øu kh√¥ng t√¨m th·∫•y FILE_NAME, tr·∫£ v·ªÅ None.
    """
    # Ki·ªÉm tra ch·ªØ k√Ω "FILE"
    if record_data[0:4] != b"FILE":
        return None
    flags = read_little_endian(record_data, 22, 2)
    is_directory = bool(flags & 0x02)
    # L·∫•y offset c√°c attribute t·ª´ record header (offset 20, 2 bytes)
    attr_offset = read_little_endian(record_data, 20, 2)
    file_name = None
    parent_ref = None
    offset = attr_offset
    while offset < len(record_data):
        # M·ªói attribute c√≥:
        #   - Type (4 bytes). N·∫øu = 0xFFFFFFFF th√¨ k·∫øt th√∫c.
        attr_type = int.from_bytes(record_data[offset:offset+4], "little")
        if attr_type == 0xFFFFFFFF:
            break
        attr_length = int.from_bytes(record_data[offset+4:offset+8], "little")
        if attr_length == 0:
            break
        # N·∫øu attribute l√† FILE_NAME (type 0x30)
        if attr_type == 0x30:
            # Resident attribute: ƒë·ªçc content length v√† offset t·ª´ header
            content_length = int.from_bytes(record_data[offset+16:offset+20], "little")
            content_offset = int.from_bytes(record_data[offset+20:offset+22], "little")
            content = record_data[offset+content_offset : offset+content_offset+content_length]
            # C·∫•u tr√∫c FILE_NAME: 8 byte Parent, sau ƒë√≥ 48 byte c√°c timestamp, size,... sau ƒë√≥:
            # - File name length (1 byte) t·∫°i offset 64
            # - File name namespace (1 byte) t·∫°i offset 65
            # - File name (variable, 2 bytes/char) b·∫Øt ƒë·∫ßu t·ª´ offset 66
            if len(content) < 66:
                offset += attr_length
                continue
            parent_ref_val = int.from_bytes(content[0:8], "little")
            # L·∫•y 48-bit th·∫•p cho s·ªë record
            parent_record = parent_ref_val & 0xFFFFFFFFFFFF
            name_length = content[64]
            try:
                name = content[66:66+name_length*2].decode("utf-16le", errors="ignore")
            except Exception:
                name = "<Error decoding>"
            file_name = name
            parent_ref = parent_record
            break
        offset += attr_length
    if file_name is None:
        return None
    return {
        "record_number": record_number,
        "name": file_name,
        "parent": parent_ref,
        "is_directory": is_directory,
        "children": []
    }

# ------------------------------
# ƒê·ªçc m·ªôt s·ªë MFT record t·ª´ NTFS (gi·∫£ s·ª≠ MFT n·∫±m li·ªÅn m·∫°ch)
# ------------------------------
def read_all_mft_records(device, ntfs_info, max_records=1000):
    """
    ƒê·ªçc li√™n ti·∫øp c√°c MFT record t·ª´ v·ªã tr√≠ MFT.
    Ch√∫ √Ω: Trong th·ª±c t·∫ø, MFT c√≥ th·ªÉ b·ªã ph√¢n m·∫£nh; v√≠ d·ª• n√†y ƒë∆°n gi·∫£n gi·∫£ s·ª≠ MFT n·∫±m li√™n t·ª•c.
    """
    records = {}
    bytes_per_sector = ntfs_info["Bytes per Sector"]
    sectors_per_cluster = ntfs_info["Sectors per Cluster"]
    mft_cluster = ntfs_info["MFT Cluster Number"]
    record_size = ntfs_info["MFT Record Size"]

    mft_offset = mft_cluster * sectors_per_cluster * bytes_per_sector

    try:
        with open(device, "rb") as disk:
            disk.seek(mft_offset)
            for i in range(max_records):
                record_data = disk.read(record_size)
                if len(record_data) < record_size:
                    break
                rec = parse_ntfs_mft_record(record_data, i)
                if rec:
                    records[i] = rec
    except Exception as e:
        print("‚ùå L·ªói khi ƒë·ªçc MFT:", e)
        sys.exit(1)
    return records

# ------------------------------
# X√¢y d·ª±ng c√¢y th∆∞ m·ª•c t·ª´ danh s√°ch MFT record (d·ª±a tr√™n parent reference)
# ------------------------------
def build_tree(records, root_record=5):
    """
    X√¢y d·ª±ng c√¢y th∆∞ m·ª•c d·ª±a v√†o:
      - M·ªói record c√≥ tr∆∞·ªùng "parent" (l∆∞u s·ªë record c·ªßa th∆∞ m·ª•c ch·ª©a n√≥).
      - Root directory th∆∞·ªùng c√≥ record_number 5.
    N·∫øu m·ªôt record c√≥ parent kh√¥ng c√≥ trong danh s√°ch, b·ªè qua ho·∫∑c gh√©p v√†o root.
    """
    # Kh·ªüi t·∫°o tr∆∞·ªùng children cho m·ªçi record
    for rec in records.values():
        rec["children"] = []
    # X√¢y d·ª±ng c√¢y: v·ªõi m·ªói record, n·∫øu parent c√≥ trong danh s√°ch th√¨ th√™m v√†o children c·ªßa parent.
    for rec in records.values():
        parent = rec["parent"]
        if parent in records and parent != rec["record_number"]:
            records[parent]["children"].append(rec)
    # Tr·∫£ v·ªÅ record g·ªëc (n·∫øu c√≥)
    return records.get(root_record, None)

def print_tree(node, indent=""):
    """ In c√¢y th∆∞ m·ª•c d·∫°ng ƒë·ªá quy """
    if node is None:
        return
    icon = "üìÅ" if node["is_directory"] else "üìÑ"
    print(f"{indent}{icon} {node['name']} (Record {node['record_number']})")
    for child in sorted(node["children"], key=lambda x: x["name"]):
        print_tree(child, indent + "   ")

# ------------------------------
# H√†m l·∫•y thi·∫øt b·ªã t·ª´ ng∆∞·ªùi d√πng (Windows)
# ------------------------------
def get_device():
    """Cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p k√Ω t·ª± ·ªï ƒëƒ©a (VD: C, D, ...)"""
    while True:
        drive_letter = input("Nh·∫≠p k√Ω t·ª± ·ªï ƒëƒ©a (C, D, ...): ").strip().upper()
        if len(drive_letter) == 1 and drive_letter.isalpha():
            return fr"\\.\{drive_letter}:"
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng k√Ω t·ª± ·ªï ƒëƒ©a (VD: C, D)")

# ------------------------------
# Main
# ------------------------------
def main():
    device = get_device()
    boot_sector = read_ntfs_boot_sector_from_device(device)
    # Ki·ªÉm tra OEM ID (offset 3-10), ph·∫£i ch·ª©a "NTFS"
    oem_id = boot_sector[3:11].decode("ascii", errors="ignore").strip()
    if "NTFS" not in oem_id:
        print("‚ùå H·ªá th·ªëng t·∫≠p tin kh√¥ng ph·∫£i l√† NTFS.")
        sys.exit(1)

    print("‚úÖ Detected File System: NTFS")
    ntfs_info = read_ntfs_boot_sector(boot_sector)
    print("\nTh√¥ng tin Boot Sector c·ªßa NTFS:")
    for k, v in ntfs_info.items():
        print(f" - {k}: {v}")

    print("\nƒêang ƒë·ªçc MFT (gi·ªõi h·∫°n {} record)...".format(1000))
    records = read_all_mft_records(device, ntfs_info, max_records=1000)
    if not records:
        print("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c MFT records.")
        sys.exit(1)
    print(f"ƒê√£ ƒë·ªçc ƒë∆∞·ª£c {len(records)} record t·ª´ MFT.")

    print("\nX√¢y d·ª±ng c√¢y th∆∞ m·ª•c t·ª´ MFT (Root record #5)...")
    root = build_tree(records, root_record=5)
    if root is None:
        print("‚ùå Kh√¥ng t√¨m th·∫•y root directory (record #5).")
        sys.exit(1)
    
    print("\nC√¢y th∆∞ m·ª•c NTFS:")
    print_tree(root)

if __name__ == "__main__":
    main()
